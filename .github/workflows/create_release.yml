on:
  push:
    branches:
      - "master"

name: Create Release

jobs:
  build:
    name: Create and upload release
    runs-on: ubuntu-latest
    steps:

      - name: "[ PREPARE ] install packages"
        run: |
          sudo apt-get install -y curl twine python3 python3-mechanicalsoup

      - name: "[ PREPARE ] Get current version"
        uses: oprypin/find-latest-tag@v1
        with:
          repository: ${{ github.repository }}  # The repository to scan.
          releases-only: true  # We know that all relevant tags have a GitHub release for them.
        id: dbv_robo_ver  # The step ID to refer to later.

      - name: "[ PREPARE ] Checkout code"
        uses: actions/checkout@v2

      - name: "[ PREPARE ] Retrieve Version from version.py"
        run: |
          echo APP_NAME=$(echo ${{ github.repository }} | awk -F / '{print $2}') >> $GITHUB_ENV
          echo TAG_NAME=$(cat setup.py | grep -i version | head -n 1 | sed 's/version=//g' | sed s/\'//g | sed 's/\,//g' | sed 's/\ //g') >> $GITHUB_ENV

      - run: echo "Repo is at version ${{ steps.dkb_robo_ver.outputs.tag }}"
      - run: echo "APP tag is ${{ env.APP_NAME }}"
      - run: echo "Latest tag is ${{ env.TAG_NAME }}"

      - name: "[ BUILD ] Create Release"
        id: create_release
        if: steps.dbv_robo_ver.outputs.tag != env.TAG_NAME
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ env.TAG_NAME }}
          release_name: ${{ env.APP_NAME }} ${{ env.TAG_NAME }}
          body: |
            [Changelog](CHANGES.md)
          draft: false
          prerelease: false

      - name: "[ BUILD ] create pypi package"
        id: create_package
        if: steps.dbv_robo_ver.outputs.tag != env.TAG_NAME
        run: |
          python3 setup.py sdist

      - name: "[ UPLOAD ] Publish package"
        uses: pypa/gh-action-pypi-publish@master
        if: steps.dbv_robo_ver.outputs.tag != env.TAG_NAME
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}
